In order to get better advantage of the software testing, organizations are nowadays taking 
a step forward.

They implement important acceptance testing scenarios while development in-progress.

This approach is known as Behavior Driven Development (BDD)

Behavior

Driven

Development

It gives us an opportunity to create test scripts from both the developer's and the customer's 
perspective as well.

So in begining, developers, project managers, QAs and UAT team and the product owner
come together and brain storm about which test scenarios should be passed in order to call
the sofware/application is successful.

All these test scripts are in simple English language, so it serves the purpose of 
documentation also

Example

If we are developing a user authentication feature, then the following can be few key test 
scenarios, which needs to get passed in all cases to call it as a pass

- User should be able to login with valid user name and password
- User should not be able to login with invalid user name and password
- User should not be able to login with valid user name and invalid password

Cucumber can defined as a testing framework, driven by English text. It serves as documentation, 
automated tests, and development aid - all in one


Cucumber reads the code written in plain English (Gherkin) in the feature file


Prerequisites

Java
Eclipse
Maven - It provides platform to perform activities like generating source code, compiling code, packaging code
to a jar etc. Later if any of the software versions get changes, Maven provides an easy way to 
modify the test project.

Configure cucumber with Maven

Create a maven project

File --> New --> other --> Maven --> Maven Project --> Next

Provide group Id (group ID will identify your project uniquely across all projects)

Provide artifact ID (artifact id is the name of the jar without version. you can choose any name
which is in lowercase) --> click Finish

Add dependency for Cucumber-Java: This will indicate Maven, which Cucumber files are to be downloaded from the central repository to the local repository.

Create one more dependency tag.

Provide the following information within the dependency tag

<dependency> 
   <groupId>info.cukes</groupId> 
   <artifactId>cucumber-java</artifactId> 
   <version>1.0.2</version> 
   <scope>test</scope> 
</dependency>

Add dependency for Cucumber-JUnit: This will indicate Maven, which Cucumber JUnit files are to be downloaded from the central repository to the local repository.

Create one more dependency tag.

Provide the following information within the dependency tag

<dependency> 
   <groupId>info.cukes</groupId> 
   <artifactId>cucumber-junit</artifactId> 
   <version>1.0.2</version> 
   <scope>test</scope> 
</dependency>

Step 6 - Add dependency for JUnit: This will indicate Maven, which JUnit files are to be downloaded from the central repository to the local repository.

Create one more dependency tag.

Provide the following information within the dependency tag.

<dependency> 
   <groupId>junit</groupId> 
   <artifactId>junit</artifactId> 
   <version>4.10</version> 
   <scope>test</scope> 
</dependency>

Create a feature file (to be covered later).

Create a step definition file (to be covered later).

Create a JUnit runner to run the test (to be covered later).

040 47478337